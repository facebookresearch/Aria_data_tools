"use strict";(self.webpackChunkstaticdocs_starter=self.webpackChunkstaticdocs_starter||[]).push([[483],{3905:(e,a,t)=>{t.r(a),t.d(a,{MDXContext:()=>s,MDXProvider:()=>p,mdx:()=>v,useMDXComponents:()=>c,withMDXComponents:()=>m});var r=t(67294);function o(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function n(){return n=Object.assign||function(e){for(var a=1;a<arguments.length;a++){var t=arguments[a];for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])}return e},n.apply(this,arguments)}function i(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);a&&(r=r.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,r)}return t}function d(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?i(Object(t),!0).forEach((function(a){o(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function l(e,a){if(null==e)return{};var t,r,o=function(e,a){if(null==e)return{};var t,r,o={},n=Object.keys(e);for(r=0;r<n.length;r++)t=n[r],a.indexOf(t)>=0||(o[t]=e[t]);return o}(e,a);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);for(r=0;r<n.length;r++)t=n[r],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=r.createContext({}),m=function(e){return function(a){var t=c(a.components);return r.createElement(e,n({},a,{components:t}))}},c=function(e){var a=r.useContext(s),t=a;return e&&(t="function"==typeof e?e(a):d(d({},a),e)),t},p=function(e){var a=c(e.components);return r.createElement(s.Provider,{value:a},e.children)},u="mdxType",h={inlineCode:"code",wrapper:function(e){var a=e.children;return r.createElement(r.Fragment,{},a)}},_=r.forwardRef((function(e,a){var t=e.components,o=e.mdxType,n=e.originalType,i=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),m=c(t),p=o,u=m["".concat(i,".").concat(p)]||m[p]||h[p]||n;return t?r.createElement(u,d(d({ref:a},s),{},{components:t})):r.createElement(u,d({ref:a},s))}));function v(e,a){var t=arguments,o=a&&a.mdxType;if("string"==typeof e||o){var n=t.length,i=new Array(n);i[0]=_;var d={};for(var l in a)hasOwnProperty.call(a,l)&&(d[l]=a[l]);d.originalType=e,d[u]="string"==typeof e?e:o,i[1]=d;for(var s=2;s<n;s++)i[s]=t[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}_.displayName="MDXCreateElement"},6430:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>l,contentTitle:()=>i,default:()=>p,frontMatter:()=>n,metadata:()=>d,toc:()=>s});var r=t(87462),o=(t(67294),t(3905));const n={sidebar_position:1,id:"examples",title:"Examples"},i="Examples",d={unversionedId:"howto/examples",id:"howto/examples",title:"Examples",description:"Introduction",source:"@site/docs/howto/examples.mdx",sourceDirName:"howto",slug:"/howto/examples",permalink:"/Aria_data_tools/docs/howto/examples",draft:!1,editUrl:"https://github.com/facebookresearch/aria_data_tools/docs/howto/examples.mdx",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,id:"examples",title:"Examples"},sidebar:"tutorialSidebar",previous:{title:"Sensors and Measurements",permalink:"/Aria_data_tools/docs/sensors-measurements"},next:{title:"Accessing Sensor Data",permalink:"/Aria_data_tools/docs/howto/dataprovider"}},l={},s=[{value:"Introduction",id:"introduction",level:2},{value:"Retrieve and Read Data Using the Project Aria Data Provider",id:"retrieve-and-read-data-using-the-project-aria-data-provider",level:2},{value:"Python",id:"python",level:3},{value:"1. Open and select the file to read",id:"1-open-and-select-the-file-to-read",level:4},{value:"2. Select which sensor information to extract",id:"2-select-which-sensor-information-to-extract",level:4},{value:"3.  Set whether to print data layouts (optional)",id:"3--set-whether-to-print-data-layouts-optional",level:4},{value:"4. Read the data stream",id:"4-read-the-data-stream",level:4},{value:"5. Access the data stream",id:"5-access-the-data-stream",level:4},{value:"6. Read the first configuration record of a stream:",id:"6-read-the-first-configuration-record-of-a-stream",level:4},{value:"7. Load the device model",id:"7-load-the-device-model",level:4},{value:"C++",id:"c",level:3},{value:"Visualizing Sequences and Pre-Computed Camera Trajectory",id:"visualizing-sequences-and-pre-computed-camera-trajectory",level:2},{value:"Python",id:"python-1",level:3},{value:"C++",id:"c-1",level:3}],m={toc:s},c="wrapper";function p(e){let{components:a,...n}=e;return(0,o.mdx)(c,(0,r.Z)({},m,n,{components:a,mdxType:"MDXLayout"}),(0,o.mdx)("h1",{id:"examples"},"Examples"),(0,o.mdx)("h2",{id:"introduction"},"Introduction"),(0,o.mdx)("p",null,"The Aria Research Kit: Aria Data Tools provides Python3 code and a C++ library to work with ",(0,o.mdx)("a",{parentName:"p",href:"/Aria_data_tools/docs/aria-vrs"},"VRS files"),"."),(0,o.mdx)("p",null,"The following examples provide specific scenarios for how to use the Project Aria Data Provider and how to visualize sequences and pre-computed camera trajectory."),(0,o.mdx)("h2",{id:"retrieve-and-read-data-using-the-project-aria-data-provider"},"Retrieve and Read Data Using the Project Aria Data Provider"),(0,o.mdx)("h3",{id:"python"},"Python"),(0,o.mdx)("p",null,"In this example, records are extracted and read for the Left SLAM Camera from ",(0,o.mdx)("inlineCode",{parentName:"p"},"recording.vrs"),".\nFor more information about the Project Aria Data Provider go to ",(0,o.mdx)("a",{parentName:"p",href:"/Aria_data_tools/docs/howto/dataprovider"},"Accessing Sensor Data")),(0,o.mdx)("h4",{id:"1-open-and-select-the-file-to-read"},"1. Open and select the file to read"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre"},"$ python\n>>> import projectaria_tools as pyark\n>>> vrs_data_provider = pyark.dataprovider.AriaVrsDataProvider()\n>>> vrs_data_provider.openFile(\u2018recording.vrs\u2019)\n")),(0,o.mdx)("h4",{id:"2-select-which-sensor-information-to-extract"},"2. Select which sensor information to extract"),(0,o.mdx)("p",null,"Either through a high-level API:"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre"},"vrs_data_provider.setSlamLeftCameraPlayer()\n")),(0,o.mdx)("p",null,"or with a StreamID:"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre"},">>> slam_camera_recordable_type_id = 1201\n>>> slam_left_camera_instance_id = 1\n>>> slam_left_camera_stream_id = pyark.dataprovider.StreamId(slam_camera_recordable_type_id, slam_left_camera_instance_id)\n>>> vrs_data_provider.setStreamPlayer(slam_left_camera_stream_id)\n")),(0,o.mdx)("h4",{id:"3--set-whether-to-print-data-layouts-optional"},"3.  Set whether to print data layouts (optional)"),(0,o.mdx)("p",null,"By default, data layouts are not printed while reading records. Set the verbosity to True to print data layouts and False to not print data layouts:"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre"},"vrs_data_provider.setVerbose(True)\n")),(0,o.mdx)("h4",{id:"4-read-the-data-stream"},"4. Read the data stream"),(0,o.mdx)("p",null,"All records in timestamp order, example command and output."),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre"},">>> vrs_data_provider.readAllRecords()\n4822.486 Camera Data (SLAM) #1 [1201-1]: jpg, 44338 bytes. # JPEG compressed image data size before decompression\n...\n4832.286 Camera Data (SLAM) #1 [1201-1]: jpg, 64148 bytes.\n4832.386 Camera Data (SLAM) #1 [1201-1]: jpg, 64174 bytes.\n")),(0,o.mdx)("p",null,"Read a single data record by timestamp:"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre"},"vrs_data_provider.readDataRecordByTime(slam_left_camera_stream_id, someTimestamp)\n")),(0,o.mdx)("p",null,"You can also use a higher level API that reads a data record in a specific stream and proceeds next timestamp in the player internally."),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre"},"vrs_data_provider.tryFetchNextData(slam_left_camera_stream_id)\n")),(0,o.mdx)("h4",{id:"5-access-the-data-stream"},"5. Access the data stream"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre"},">>> slam_left_camera_player = vrs_data_provider.getSlamLeftCameraPlayer()\n>>> slam_left_camera_data_record = slam_left_camera_player.getDataRecord()\n>>> slam_left_camera_data_record.captureTimestampNs\n 4832385508212\n\n>>> slam_left_camera_data = slam_left_camera_player.getData()\n>>> pixel_frame = slam_left_camera_data.pixelFrame\n>>> buffer = pixel_frame.getBuffer()\n>>> len(buffer)\n307200 # JPEG image data decompressed internally in AriaImageSensorPlayer\n# equal to SLAM camera image width (640) * image height(480)\n\n")),(0,o.mdx)("h4",{id:"6-read-the-first-configuration-record-of-a-stream"},"6. Read the first configuration record of a stream:"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre"},"vrs_data_provider.readFirstConfigurationRecord(slam_left_camera_stream_id)\n")),(0,o.mdx)("h4",{id:"7-load-the-device-model"},"7. Load the device model"),(0,o.mdx)("p",null,"There are calibration strings for each image and motion stream. Reading the configuration record for any one of them will load the device model."),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre"},">>> slam_left_camera_stream_id = slam_left_camera_player.getStreamId()\n>>> slam_left_camera_stream_id\n<pyark.dataprovider.StreamId object at 0x7f955808c270>\n>>> vrs_data_provider.readFirstConfigurationRecord(slam_left_camera_stream_id)\nTrue\n>>> vrs_data_provider.loadDeviceModel()\nTrue\n>>> device_model = vrs_data_provider.getDeviceModel()\n>>> device_model\n<pyark.sensors.DeviceModel object at 0x7f955808c2b0>\n")),(0,o.mdx)("h3",{id:"c"},"C++"),(0,o.mdx)("p",null,"Use the following commands to verbosely read all or some data streams in a Project Aria VRS file."),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre"},"$ cd build/data_provider\n$ ./read_all <vrs_path> # Read records of all streams verbosely\n$ ./read_selected <vrs_path> # Read records of selected streams verbosely\n")),(0,o.mdx)("h2",{id:"visualizing-sequences-and-pre-computed-camera-trajectory"},"Visualizing Sequences and Pre-Computed Camera Trajectory"),(0,o.mdx)("p",null,"Use the following commands to run the Visualization Tool:"),(0,o.mdx)("h3",{id:"python-1"},"Python"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre"},"$ cd src/visualization\n$ python3.9 main.py ${vrs_path} ${optional_pose_path} ${optional_eyetracking_path} ${optional_speechtotext_path}\n")),(0,o.mdx)("h3",{id:"c-1"},"C++"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre"},"$ cd build/visualization\n$ ./aria_viewer ${vrs_path} ${optional_pose_path} ${optional_eyetracking_path} ${optional_speechtotext_path}\n\n")),(0,o.mdx)("p",null,"Pose, eye tracking and speech2text paths are optional. If they are not provided, the visualization tool will try to infer the full paths of ",(0,o.mdx)("inlineCode",{parentName:"p"},"trajectory.csv"),", ",(0,o.mdx)("inlineCode",{parentName:"p"},"et_in_rgb_stream.csv")," and ",(0,o.mdx)("inlineCode",{parentName:"p"},"speech_aria_domain.csv")," from the VRS path by using the Aria Pilot Dataset structure:"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre"},"\u251c\u2500\u2500 location\n\u2502 \u2514\u2500\u2500 trajectory.csv\n\u251c\u2500\u2500 eyetracking\n\u2502 \u2514\u2500\u2500 et_in_rgb_stream.csv\n\u251c\u2500\u2500 speech2text\n\u2502 \u2514\u2500\u2500 speech_aria_domain.csv\n\u251c\u2500\u2500 ${vrs_path}\n\u2514\u2500\u2500 ...\n")),(0,o.mdx)("p",null,"You will see something like the image below in the viewer after you press the ",(0,o.mdx)("strong",{parentName:"p"},"Play")," button.\n",(0,o.mdx)("img",{alt:"img image of visualization tool",src:t(62120).Z,width:"2170",height:"1538"})),(0,o.mdx)("p",null,"For more information, about this tool, go to ",(0,o.mdx)("a",{parentName:"p",href:"/Aria_data_tools/docs/howto/visualizing"},"Visualize Sequences and Pre-Computed Camera Trajectory")))}p.isMDXComponent=!0},62120:(e,a,t)=>{t.d(a,{Z:()=>r});const r=t.p+"assets/images/aria_viewer-f6f0cd7e503ac9f794b4a9f1d4d2142b.png"}}]);